# -*- coding: utf-8 -*-
"""KNN Classifier - model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dYbkb5demwioMupOJkAT9OUGEEP6TmyR
"""

# Imorting dependencies

import numpy as np
import statistics

class KNN_Classifier():

  # initialising the parameters
  def __init__(self, distance_metric):
    
    self.distance_metric = distance_metric

  # getting the distance metric
  def git_distance_metric(self, training_data_point, test_data_point):

    if self.distance_metric == 'euclidean':

      dist = 0

      for i in range(len(training_data_point) - 1): # taking all the features except target column

        dist += (training_data_point[i] - test_data_point[i]) ** 2

      euclidean_dist = np.sqrt(dist)
      return euclidean_dist
    
    elif self.distance_metric == 'manhattan':

      for i in range(len(training_data_point - 1)):

        dist += abs(training_data_point[i] - test_data_point[i])

      manhattan_dist = dist
      return manhattan_dist

  # getting the nearest neighbours
  def get_neaerest_neighbours(self, x_train, test_data, k):
    
    distance_list = []


    # in each iteration we will pick a data point and find it's distance from the test data
    for training_data in x_train:

      distance = self.git_distance_metric(training_data, test_data)
      distance_list.append(training_data, distance)

    # sorting the list based on the distance
    distance_list.sort(key=lambda x:x[1])

    neighbors_list = []

    # k is the number of nearest neighbours we want
    for j in range(k):
      
      neighbors_list.append(distance_list[j][0])
      
    return neighbors_list    
    
  # Predict the class which the test data belong to
  def predict(self, x_train, test_data, k):

    neighbors = self.neaerest_neighbours(x_train, test_data, k)

    # checking which class has the majority of nearest neighbors
    for data in neighbors:
      label = []
      # Appending the last column value, that is the target (class 0 or 1)
      label.append(data[-1])

    predicted_class = statistics.mode(label)

    return predicted_class

# Instatntiating the class
classifier = KNN_Classifier(distance_metric='euclidean')

# Put suitable x and x_test values to make aprediction
classifier.predict(X, X_test, k=5)